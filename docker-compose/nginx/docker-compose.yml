version: "3.3"

# docker-compose.yml configuration for an INGX web server that sits behind traefik 
#
#  Environment Variables:
#
#   === Variables below are provided by Portainer when launched on tp_hub, and do not need to be added to launch environment variables ===
#
#
#    PARENT_DNS_DOMAIN         The parent DNS domain name.  The fully qualified DNS name will be "${SUBDOMAIN}.${PARENT_DNS_DOMAIN}".
#
#    SHARED_APP_HOST_RULE
#                            The "Host" Traefik rule expression that will match all HTTP(S) hostnames for the shared public
#                                 apps.
#
#    SHARED_LAN_APP_HTTP_HOST_RULE
#                            The "Host" Traefik rule expression that will match all HTTP hostnames for the private LAN-only
#                                 apps.
#
# This stack serves:
#    https://${SUBDOMAIN:-www}.${PARENT_DNS_DOMAIN}         (public internet)                 (hostname based)
#    https://${SHARED_APP_DNS_NAME}/${SUBDOMAIN:-www}       (public internet)                 (path-based)
#    http://${SUBDOMAIN:-www}.${PARENT_DNS_DOMAIN}          (private LAN only)                (hostname based, requires /etc/hosts entry)
#    http://${SHARED_LAN_APP_DNS_NAME}/${SUBDOMAIN:-www}    (private LAN only)                (path-based, handled by <common-lan-local-hostname> router; see below)
#    http://<common-lan-local-hostname>/${SUBDOMAIN:-www}   (private LAN only)                (path-based, multiple hostnames accepted; see below)
services:
  www:
    #image: "nginx:alpine"
    image: "local/www-static"
    build: .
    pull_policy: build
    hostname: ${WWW_HOSTNAME:-${SUBDOMAIN:-www}}
    networks:
      - traefik                # The network through which traefik forwards requests to our service
    restart: always            # This container will be restarted when this host reboots or docker is restarted
    labels:
      - "traefik.enable=true"   # tells traefik that this container should be reverse-proxied

      # Middleware that will strip off the /${SUBDOMAIN:-www} prefix before forwarding to the www service (used by multiple routers)
      - "traefik.http.middlewares.${SUBDOMAIN:-www}-strip-prefix.stripPrefix.prefixes=/${SUBDOMAIN:-www}"

      # -----------------------------------------
      # A router for https://${SUBDOMAIN:-www}.${PARENT_DNS_DOMAIN}, on the public internet entrypoint
      - "traefik.http.routers.${SUBDOMAIN:-www}-https-public.entrypoints=websecure"
      - "traefik.http.routers.${SUBDOMAIN:-www}-https-public.rule=Host(`${SUBDOMAIN:-www}.${PARENT_DNS_DOMAIN}`)"
      # -----------------------------------------
      # A router for http://${SUBDOMAIN:-www}.${PARENT_DNS_DOMAIN}, on the local LAN entrypoint
      # Note: to use this entry point the client must have an entry in /etc/hosts
      - "traefik.http.routers.${SUBDOMAIN:-www}-http-private.entrypoints=lanweb"
      - "traefik.http.routers.${SUBDOMAIN:-www}-http-private.rule=Host(`${SUBDOMAIN:-www}.${PARENT_DNS_DOMAIN}`)"
      # -----------------------------------------
      # A router for http://<common-lan-app-hostname>/${SUBDOMAIN:-www}, on the local LAN entrypoint only
      - "traefik.http.routers.${SUBDOMAIN:-www}-http-private-path.entrypoints=lanweb"
      - "traefik.http.routers.${SUBDOMAIN:-www}-http-private-path.rule=${SHARED_LAN_APP_HTTP_HOST_RULE} && PathPrefix(`/${SUBDOMAIN:-www}`)"
      # Strip the prefix
      - "traefik.http.routers.${SUBDOMAIN:-www}-http-private-path.middlewares=${SUBDOMAIN:-www}-strip-prefix"

networks:

  traefik:
    external: true
